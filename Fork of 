{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9189026,"sourceType":"datasetVersion","datasetId":5554736}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Predicting Lung Cancer: Unveiling Insights from Survey Data ðŸš€","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-18T12:33:46.784168Z","iopub.execute_input":"2024-08-18T12:33:46.784702Z","iopub.status.idle":"2024-08-18T12:33:49.722867Z","shell.execute_reply.started":"2024-08-18T12:33:46.784657Z","shell.execute_reply":"2024-08-18T12:33:49.721479Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Data Loading and Initial Exploration","metadata":{}},{"cell_type":"code","source":"# Load the data\ndata = pd.read_csv('/kaggle/input/lung-cancer-survey-data/lung cancer survey.csv')\n\n# Display the first few rows of the dataset\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-18T12:33:49.725248Z","iopub.execute_input":"2024-08-18T12:33:49.72634Z","iopub.status.idle":"2024-08-18T12:33:49.774324Z","shell.execute_reply.started":"2024-08-18T12:33:49.726291Z","shell.execute_reply":"2024-08-18T12:33:49.77306Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Data Cleaning and Preprocessing","metadata":{}},{"cell_type":"code","source":"# Display basic information about dataset\ndata.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-18T12:33:49.775885Z","iopub.execute_input":"2024-08-18T12:33:49.776329Z","iopub.status.idle":"2024-08-18T12:33:49.804283Z","shell.execute_reply.started":"2024-08-18T12:33:49.776287Z","shell.execute_reply":"2024-08-18T12:33:49.802852Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Display statistical summary of the dataset\ndata.describe()","metadata":{"execution":{"iopub.status.busy":"2024-08-18T12:33:49.807587Z","iopub.execute_input":"2024-08-18T12:33:49.808064Z","iopub.status.idle":"2024-08-18T12:33:49.86836Z","shell.execute_reply.started":"2024-08-18T12:33:49.808022Z","shell.execute_reply":"2024-08-18T12:33:49.867108Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Strip whitespace from column names\ndata.columns = data.columns.str.strip()\n\n# Clean 'GENDER' and 'LUNG_CANCER' columns\ndata['GENDER'] = data['GENDER'].str.strip()\ndata['LUNG_CANCER'] = data['LUNG_CANCER'].str.strip()\n\n# Replace numeric values\ndata.replace({2: 1, 1: 0}, inplace=True)\n\n# Map categorical values to binary for modeling\ndata['LUNG_CANCER'] = data['LUNG_CANCER'].map({'YES': 1, 'NO': 0})\ndata['GENDER'] = data['GENDER'].map({'M': 1, 'F': 0})\n\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-18T12:33:49.869875Z","iopub.execute_input":"2024-08-18T12:33:49.870433Z","iopub.status.idle":"2024-08-18T12:33:49.902191Z","shell.execute_reply.started":"2024-08-18T12:33:49.870388Z","shell.execute_reply":"2024-08-18T12:33:49.900916Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Check for Missing Values and Duplicates**","metadata":{}},{"cell_type":"code","source":"# Check for missing values\ndata.isna().sum()\n\n# Check for duplicates and remove them\ndata.duplicated().sum()\ndata.drop_duplicates(inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-18T12:33:49.904023Z","iopub.execute_input":"2024-08-18T12:33:49.904488Z","iopub.status.idle":"2024-08-18T12:33:49.921722Z","shell.execute_reply.started":"2024-08-18T12:33:49.904429Z","shell.execute_reply":"2024-08-18T12:33:49.920468Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Class Balance Check**","metadata":{}},{"cell_type":"code","source":"# Check the class balance in the target variable\nprint(\"\\nClass balance:\")\nprint(data['LUNG_CANCER'].value_counts(normalize=True))","metadata":{"execution":{"iopub.status.busy":"2024-08-18T12:33:49.923346Z","iopub.execute_input":"2024-08-18T12:33:49.924563Z","iopub.status.idle":"2024-08-18T12:33:49.934539Z","shell.execute_reply.started":"2024-08-18T12:33:49.924517Z","shell.execute_reply":"2024-08-18T12:33:49.93321Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Correlation with Target Variable**","metadata":{}},{"cell_type":"code","source":"# Correlation with the target variables\ncorrelation_matrix = data.corr()\ncorrelation_with_target = correlation_matrix['LUNG_CANCER'].drop('LUNG_CANCER').sort_values(ascending=False).reset_index()\n\n# Bar plot showing correlation with the target variable\nfig = px.bar(correlation_with_target, x='index', y='LUNG_CANCER', title='Correlation with the target')\n\n# Updating layout\nfig.update_layout(xaxis_title = 'Features', yaxis_title = 'Correlation')\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-18T12:33:49.936268Z","iopub.execute_input":"2024-08-18T12:33:49.937025Z","iopub.status.idle":"2024-08-18T12:33:51.974247Z","shell.execute_reply.started":"2024-08-18T12:33:49.93698Z","shell.execute_reply":"2024-08-18T12:33:51.972906Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Distribution of the Age**","metadata":{}},{"cell_type":"code","source":"# Histogram of the age distribution\nfig = px.histogram(data, x='AGE', title='Distribution of the Age', text_auto=True)\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-18T12:33:51.976474Z","iopub.execute_input":"2024-08-18T12:33:51.976945Z","iopub.status.idle":"2024-08-18T12:33:52.101565Z","shell.execute_reply.started":"2024-08-18T12:33:51.976903Z","shell.execute_reply":"2024-08-18T12:33:52.100329Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Outlier Detection**","metadata":{}},{"cell_type":"code","source":"# Boxplot for outlier detection in all features\n\nplt.figure(figsize=(12,6))\ndata.boxplot()\nplt.title('Boxplot of features')\nplt.xticks(rotation=90)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-18T12:35:21.487961Z","iopub.execute_input":"2024-08-18T12:35:21.488386Z","iopub.status.idle":"2024-08-18T12:35:22.375674Z","shell.execute_reply.started":"2024-08-18T12:35:21.488351Z","shell.execute_reply":"2024-08-18T12:35:22.374421Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Train-Test Split and Feature Scaling","metadata":{}},{"cell_type":"code","source":"# Splitting data into features and target variable\nX = data.drop('LUNG_CANCER', axis=1)\ny = data['LUNG_CANCER']\n\n# Splitting data into training and testing sets\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n\n# Feature scaling using StandardScaler\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_test_scaled = scaler.transform(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-08-18T12:39:19.045726Z","iopub.execute_input":"2024-08-18T12:39:19.046153Z","iopub.status.idle":"2024-08-18T12:39:19.066618Z","shell.execute_reply.started":"2024-08-18T12:39:19.046118Z","shell.execute_reply":"2024-08-18T12:39:19.065515Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Handling Imbalance with SMOTE**","metadata":{}},{"cell_type":"code","source":"smote = SMOTE(random_state=42)\nX_train_resampled, y_train_resampled = smote.fit_resample(X_train_scaled, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-08-18T12:45:12.943035Z","iopub.execute_input":"2024-08-18T12:45:12.943475Z","iopub.status.idle":"2024-08-18T12:45:12.955522Z","shell.execute_reply.started":"2024-08-18T12:45:12.943417Z","shell.execute_reply":"2024-08-18T12:45:12.954156Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Feature selection using Recursive Feature Elimination (RFE)\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression\n\nrfe_selector = RFE(estimator=LogisticRegression(), n_features_to_select=10, step=1)\nrfe_selector = rfe_selector.fit(X_train_resampled, y_train_resampled)\nselected_features = X.columns[rfe_selector.support_]\n\n# Display selected features\nprint(\"\\nSelected features:\", selected_features)\n\n# Transforming data to keep only selected features\nX_train_selected = X_train_resampled[:, rfe_selector.support_]\nX_test_selected = X_test_scaled[:, rfe_selector.support_]","metadata":{"execution":{"iopub.status.busy":"2024-08-18T12:45:15.153387Z","iopub.execute_input":"2024-08-18T12:45:15.153835Z","iopub.status.idle":"2024-08-18T12:45:15.205945Z","shell.execute_reply.started":"2024-08-18T12:45:15.153799Z","shell.execute_reply":"2024-08-18T12:45:15.204782Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Model Training and Evaluation","metadata":{}},{"cell_type":"code","source":"# Define models to train\nmodels = {\n    'Logistic Regression': LogisticRegression(random_state=42),\n    'Random Forest': RandomForestClassifier(random_state=42),\n    'SVM': SVC(random_state=42),\n    'XGBoost': XGBClassifier(random_state=42)\n}\n\n# Train models and display results\nfor name, model in models.items():\n    model.fit(X_train_selected, y_train_resampled)\n    y_pred = model.predict(X_test_selected)\n    print(f\"\\n{name} Results:\")\n    print(classification_report(y_test, y_pred))","metadata":{"execution":{"iopub.status.busy":"2024-08-18T12:48:19.62277Z","iopub.execute_input":"2024-08-18T12:48:19.623179Z","iopub.status.idle":"2024-08-18T12:48:20.042996Z","shell.execute_reply.started":"2024-08-18T12:48:19.623148Z","shell.execute_reply":"2024-08-18T12:48:20.04212Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Confusion Matrix Visualization","metadata":{}},{"cell_type":"code","source":"# Visualize the confusion matrix for Random Forest model\nfrom sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_test, y_pred)\nfig = px.imshow(cm, text_auto=True, aspect='auto', color_continuous_scale='Blues')\nfig.update_layout(title_text=f'Confusion Matrix - {name}', xaxis_title='Predicted', yaxis_title='Actual')\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-18T12:51:05.802839Z","iopub.execute_input":"2024-08-18T12:51:05.803674Z","iopub.status.idle":"2024-08-18T12:51:05.931195Z","shell.execute_reply.started":"2024-08-18T12:51:05.803629Z","shell.execute_reply":"2024-08-18T12:51:05.929853Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Feature Importance (Random Forest)**","metadata":{}},{"cell_type":"code","source":"# Plot feature importance for the Random Forest model\nrf_model = models['Random Forest']\nfeature_importance = pd.DataFrame({\n    'feature': selected_features,\n    'importance': rf_model.feature_importances_\n}).sort_values('importance', ascending=False)\n\n# Bar plot for feature importnace\nfig = px.bar(feature_importance, x='importance', y='feature', orientation='h', title='Feature Importance for Random Forest')\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-18T12:53:49.898382Z","iopub.execute_input":"2024-08-18T12:53:49.898919Z","iopub.status.idle":"2024-08-18T12:53:49.9937Z","shell.execute_reply.started":"2024-08-18T12:53:49.898878Z","shell.execute_reply":"2024-08-18T12:53:49.992518Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Logistic Regression Coefficients**","metadata":{}},{"cell_type":"code","source":"# Plot coefficients from the Logistic Regression model\nlr_model = models['Logistic Regression']\ncoef_df = pd.DataFrame({\n    'feature': selected_features,\n    'coefficient': lr_model.coef_[0]\n}).sort_values('coefficient', ascending=False)\n\n# Bar plot for logistic regression coefficients\nfig = px.bar(coef_df, x='coefficient', y='feature', orientation='h', title='Logistic Regression Coefficients')\nfig.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-18T12:57:32.212318Z","iopub.execute_input":"2024-08-18T12:57:32.21278Z","iopub.status.idle":"2024-08-18T12:57:32.29116Z","shell.execute_reply.started":"2024-08-18T12:57:32.212747Z","shell.execute_reply":"2024-08-18T12:57:32.289997Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Conclusion\nThis analysis has shown that the selected features can significantly contribute to predicting lung cancer risk. Among the models used, the Random Forest and Logistic Regression models provided valuable insights through feature importance and coefficients, respectively. Future work could involve further hyperparameter tuning and cross-validation to enhance model performance.","metadata":{}}]}